{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"gittable","text":"<p>The package provides a CLI and library for common interactions with a Git repository:</p> <ul> <li>Download select files from a (public or private) Git repository</li> <li>Tag commits with your project/package version, when the version has changed</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>gittable</code> with pip:</p> <pre><code>pip3 install gittable\n</code></pre>"},{"location":"cli/","title":"Command Line Interface","text":"<pre><code>$ gittable -h\nUsage:\n  gittable &lt;command&gt; [options]\n\nCommands:\n  download                    Download files from a GIT repo matching one or\n                              more specified pattern(s).\n  tag-version                 Tag your repo with the project version, if a tag\n                              for that version doesn't already exist.\n</code></pre>"},{"location":"cli/#gittable-tag-version","title":"gittable tag-version","text":"<p>Note: Currently, <code>setuptools</code>, <code>hatch</code>, and <code>poetry</code> python projects are supported.</p> <pre><code>$ gittable tag-version -h\nusage: gittable tag-version [-h] [-m MESSAGE] [directory]\n\nTag your repo with the project version, if a tag for that version\ndoesn't already exist.\n\npositional arguments:\n  directory             Your project directory. If not provided, the current\n                        directory will be used.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m MESSAGE, --message MESSAGE\n                        The tag message. If not provided, the new version\n                        number is used.\n</code></pre>"},{"location":"cli/#gittable-download","title":"gittable download","text":"<pre><code>$ gittable download -h\nusage: gittable download [-h] [-b BRANCH] [-d DIRECTORY] [-u USER]\n                         [-p PASSWORD]\n                         repo [file [file ...]]\n\nDownload files from a git repository matching one or more specified file\nnames or glob patterns\n\npositional arguments:\n  repo                  Reference repository\n  file                  One or more `glob` pattern(s) indicating a specific\n                        file or files to include. If not provided, all files\n                        in the repository will be included.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b BRANCH, --branch BRANCH\n                        Retrieve files from BRANCH instead of the remote's\n                        HEAD\n  -d DIRECTORY, --directory DIRECTORY\n                        The directory under which to save matched files. If\n                        not provided, files will be saved under the current\n                        directory.\n  -u USER, --user USER  A username for accessing the repository\n  -p PASSWORD, --password PASSWORD\n                        A password for accessing the repository\n</code></pre>"},{"location":"contributing/","title":"Contributing to gittable","text":""},{"location":"contributing/#for-enorganic-contributors-and-code-owners","title":"For Enorganic Contributors and Code Owners","text":"<ol> <li> <p>Clone and Install</p> <p>To install this project for development of this library, clone this repository (replacing \"~/Code\", below, with the directory under which you want your project to reside), then run <code>make</code>:</p> <pre><code>cd ~/Code &amp;&amp; \\\ngit clone\\\nhttps://github.com/enorganic/gittable.git gittable &amp;&amp; \\\ncd gittable &amp;&amp; \\\nmake\n</code></pre> </li> <li> <p>Create a new branch for your changes (replacing \"descriptive-branch-name\"     with a descriptive branch name, and replacing feature with bugfix     if the branch addresses a bug):</p> <pre><code>git branch feature/descriptive-branch-name\n</code></pre> </li> <li> <p>Make some changes.</p> </li> <li> <p>Format and lint your code:</p> <pre><code>make format\n</code></pre> </li> <li> <p>Test your changes:</p> <pre><code>make test\n</code></pre> </li> <li> <p>Push your changes and create a pull request.</p> </li> </ol>"},{"location":"contributing/#for-everyone-else","title":"For Everyone Else","text":"<p>If you are not a contributor on this project, you can still create pull requests, however you will need to fork this project, push changes to your fork, and create a pull request from your forked repository.</p>"},{"location":"api/download/","title":"download","text":""},{"location":"api/download/#gittable.download","title":"gittable.download","text":""},{"location":"api/download/#gittable.download.download","title":"download","text":"<pre><code>download(\n    repo: str,\n    files: collections.abc.Iterable[str] = (\"**\",),\n    directory: pathlib.Path | str | None = None,\n    branch: str = \"\",\n    user: str = \"\",\n    password: str = \"\",\n) -&gt; list[str]\n</code></pre> <p>Download files from a git repository and return a list of the files downloaded.</p> <p>Parameters:</p> <ul> <li> <code>repo</code>               (<code>str</code>)           \u2013            <p>A git URL, as you would pass to <code>git clone</code></p> </li> <li> <code>files</code>               (<code>collections.abc.Iterable[str]</code>, default:                   <code>('**',)</code> )           \u2013            <p>One or more glob patterns or relative file paths</p> </li> <li> <code>directory</code>               (<code>pathlib.Path | str | None</code>, default:                   <code>None</code> )           \u2013            <p>The target directory (if not provided, the current directory is used)</p> </li> <li> <code>branch</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>A branch from which to retrieve (if not provided, files will be retrieved from HEAD)</p> </li> <li> <code>user</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            </li> <li> <code>password</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            </li> </ul> Source code in <code>src/gittable/download.py</code> <pre><code>def download(\n    repo: str,\n    files: Iterable[str] = (\"**\",),\n    directory: Path | str | None = None,\n    branch: str = \"\",\n    user: str = \"\",\n    password: str = \"\",\n) -&gt; list[str]:\n    \"\"\"\n    Download files from a git repository and return a list of the files\n    downloaded.\n\n    Parameters:\n        repo: A git URL, as you would pass to `git clone`\n        files: One or more\n            [glob patterns](https://docs.python.org/3/library/glob.html)\n            or relative file paths\n        directory: The target directory (if not provided, the current\n            directory is used)\n        branch: A branch from which to retrieve (if not provided,\n            files will be retrieved from HEAD)\n        user:\n        password:\n    \"\"\"\n    if isinstance(files, str):\n        files = (files,)\n    if directory:\n        if isinstance(directory, Path):\n            directory = str(directory.absolute())\n        else:\n            directory = os.path.abspath(directory)\n    else:\n        directory = os.path.abspath(os.path.curdir)\n    if user or password:\n        repo = update_url_user_password(repo, user, password)\n    # Shallow clone into a temp directory\n    temp_directory: str = mkdtemp(prefix=\"git_download_\")\n    check_call(\n        (\"git\", \"clone\", \"-q\", \"--depth\", \"1\", \"--single-branch\")\n        + ((\"-b\", branch) if branch else ())\n        + (repo, temp_directory)\n    )\n    # Remove the git directory, so those files aren't accidentally matched\n    rmtree(os.path.join(temp_directory, \".git\"), ignore_errors=True)\n    current_directory: str = os.path.abspath(os.path.curdir)\n    path: str\n    try:\n        os.chdir(temp_directory)\n        matched_files: tuple[str, ...] = tuple(\n            filter(\n                os.path.isfile,\n                (\n                    os.path.join(\n                        temp_directory,\n                        path,\n                    )\n                    for path in chain(*map(_iglob_recursive, files))\n                ),\n            )\n        )\n    finally:\n        os.chdir(current_directory)\n    downloaded_paths: list[str] = []\n    new_path: str\n    for path in matched_files:\n        relative_path: str = os.path.relpath(path, temp_directory)\n        new_path = os.path.join(directory, relative_path)\n        if os.path.sep in relative_path:\n            os.makedirs(os.path.dirname(new_path), exist_ok=True)\n        move(path, new_path)\n        downloaded_paths.append(new_path)\n    rmtree(temp_directory, ignore_errors=True)\n    return downloaded_paths\n</code></pre>"},{"location":"api/tag_version/","title":"tag-version","text":""},{"location":"api/tag_version/#gittable.tag_version","title":"gittable.tag_version","text":""},{"location":"api/tag_version/#gittable.tag_version.tag_version","title":"tag_version","text":"<pre><code>tag_version(\n    directory: str | pathlib.Path = os.path.curdir,\n    message: str | None = None,\n    prefix: str | None = None,\n    suffix: str | None = None,\n) -&gt; str\n</code></pre> <p>Tag your project with the package version number if no pre-existing tag with that version number exists.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>str | pathlib.Path</code>, default:                   <code>os.path.curdir</code> )           \u2013            </li> <li> <code>message</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>prefix</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>suffix</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The version number, including any prefix or suffix.</p> </li> </ul> Source code in <code>src/gittable/tag_version.py</code> <pre><code>def tag_version(\n    directory: str | Path = os.path.curdir,\n    message: str | None = None,\n    prefix: str | None = None,\n    suffix: str | None = None,\n) -&gt; str:\n    \"\"\"\n    Tag your project with the package version number *if* no pre-existing\n    tag with that version number exists.\n\n    Parameters:\n        directory:\n        message:\n        prefix:\n        suffix:\n\n    Returns:\n        The version number, including any prefix or suffix.\n    \"\"\"\n    if isinstance(directory, str):  # pragma: no cover\n        directory = Path(directory)\n    directory = str(directory.resolve())\n    version: str = _get_python_project_version(directory)\n    if prefix:\n        version = f\"{prefix}{version}\"\n    if suffix:\n        version = f\"{version}{suffix}\"\n    tags: Iterable[str] = map(\n        str.strip,\n        check_output((\"git\", \"tag\"), cwd=directory).strip().split(\"\\n\"),\n    )\n    if version not in tags:  # pragma: no cover\n        check_output(\n            (\"git\", \"tag\", \"-a\", version, \"-m\", message or version),\n            cwd=directory,\n        )\n    return version\n</code></pre>"}]}